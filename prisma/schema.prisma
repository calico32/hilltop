// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Department {
  id   String @id @default(uuid())
  name String

  /// jobs in this department
  jobs JobListing[]
}

model JobListing {
  id      String   @id @default(uuid())
  created DateTime @default(now())
  updated DateTime @updatedAt

  title            String
  status           ListingStatus @default(Draft)
  departmentId     String
  department       Department    @relation(fields: [departmentId], references: [id])
  description      String
  requirements     String[]
  responsibilities String[]
  benefits         String[]
  positions        Int
  type             JobType
  payType          PayType
  payMin           Float
  payMax           Float?
  schedule         String
  tags             String[]

  questions    JobListingQuestion[]
  answers      JobApplicationQuestion[]
  applications JobApplication[]
}

model JobListingQuestion {
  listingId String
  listing   JobListing   @relation(fields: [listingId], references: [id])
  sequence  Int
  question  String
  required  Boolean
  type      QuestionType
  min       Int?
  max       Int?

  answers JobApplicationQuestion[]

  @@id([listingId, sequence])
}

enum QuestionType {
  ShortText
  LongText
  Number
  Boolean
  File
  Select
  MultiSelect
}

enum ListingStatus {
  Draft
  Active
  Closed
}

enum PayType {
  Hourly
  Salary
}

enum JobType {
  FullTime
  PartTime
  Contract
  Internship
}

model JobApplication {
  id         String            @id @default(uuid())
  created    DateTime          @default(now())
  updated    DateTime          @updatedAt
  listingId  String
  listing    JobListing        @relation(fields: [listingId], references: [id])
  userId     String
  user       User              @relation("applicant", fields: [userId], references: [id])
  status     ApplicationStatus @default(Submitted)
  reviewerId String?
  reviewer   User?             @relation("reviewier", fields: [reviewerId], references: [id])
  resumeId   String?
  resume     Storage?          @relation("resume", fields: [resumeId], references: [id])

  questions JobApplicationQuestion[]
  notes     JobApplicationNote[]

  @@unique([listingId, userId]) // one application per user per job
}

model JobApplicationNote {
  id            String         @id @default(uuid())
  created       DateTime       @default(now())
  updated       DateTime       @updatedAt
  authorId      String
  author        User           @relation(fields: [authorId], references: [id])
  applicationId String
  application   JobApplication @relation(fields: [applicationId], references: [id])
  body          String
}

model JobApplicationQuestion {
  listingId String
  listing   JobListing         @relation(fields: [listingId], references: [id])
  sequence  Int
  question  JobListingQuestion @relation(fields: [listingId, sequence], references: [listingId, sequence])

  applicationId String
  application   JobApplication @relation(fields: [applicationId], references: [id])

  answer String

  @@id([applicationId, sequence])
}

enum Role {
  Applicant
  Recruiter
  Admin
}

enum ApplicationStatus {
  /// application submitted, waiting for review
  Submitted
  /// application reviewed, waiting for decision
  InReview
  /// application reviewed, waiting for interview
  Interviewing
  /// application rejected
  Rejected
  /// application accepted, ready for hire
  Offered
  /// applicant hired
  Hired
  /// application withdrawn
  Withdrawn
}

model User {
  id      String   @id @default(uuid())
  created DateTime @default(now())
  updated DateTime @updatedAt

  email         String   @unique
  emailVerified Boolean  @default(false)
  emailUpdates  Boolean  @default(false)
  role          Role     @default(Applicant)
  avatarId      String?
  avatar        Storage? @relation("avatar", fields: [avatarId], references: [id])
  bio           String?
  /// hashed password
  password      String
  firstName     String
  middleInitial String?
  lastName      String
  preferredName String?
  /// encrypted date of birth
  dob           String
  /// encrypted SSN/TIN
  taxId         String
  /// phone number as xxxxxxxxxx
  phone         String?
  address1      String
  address2      String?
  city          String
  state         String
  zip           String
  /// stored resume for applications
  resumeId      String?
  resume        Storage? @relation("resume", fields: [resumeId], references: [id])

  applications       JobApplication[]     @relation("applicant")
  reviews            JobApplication[]     @relation("reviewier")
  passkeys           Passkey[]
  JobApplicationNote JobApplicationNote[]
}

model Storage {
  id      String   @id
  created DateTime @default(now())
  updated DateTime @updatedAt

  /// name of the file
  name String
  /// mime type of the file
  type String
  /// file data
  data Bytes
  /// file size in bytes
  size Int

  avatar            User[]           @relation("avatar")
  resume            User[]           @relation("resume")
  applicationResume JobApplication[] @relation("resume")
}

model Passkey {
  created DateTime @default(now())
  updated DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  nickname String?

  /// `credential.type`.
  type           String
  /// `credential.id`.
  credentialId   String   @id
  /// The credential public key in `authData`.
  publicKey      Bytes
  /// `authData.signCount`.
  signCount      Int
  /// The value of the UV flag in `authData`.
  uvInitialized  Boolean
  /// The value returned from `response.getTransports()`.
  transports     String[]
  /// The value of the BE flag in `authData`.
  backupEligible Boolean
  /// The value of the BS flag in `authData`.
  backupState    Boolean
  /// COSE algorithm identifier.
  algorithm      Int
}

model PasskeyChallenge {
  created DateTime @default(now())
  expires DateTime

  id        String @id @default(uuid())
  challenge Bytes  @unique
}
